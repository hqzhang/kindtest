
properties([
   pipelineTriggers([githubPush()]),
   parameters([
           choice(name: 'choice1', choices: ['dev','qa','prod'], description: 'input cluster'),
           choice(name: 'ocversion', choices: ['oc-3.9.0','oc-3.10.0'], description: 'input oc version'),

					 ])
		])
pipeline {
    agent any
    
    options { timestamps () }
    environment { 
       //define global variable
       PATH="/usr/local/bin:$PATH"
       myvar='helloworld'
       private_key='afb3704a-da55-4576-9fb9-9a6265319f2b'
       dockerCred='	48bc6aae-d8cc-43ce-8eac-6d9bd209a8be'
       image='wavecloud/nginx-std'
       port='8081'
        app='nginx'
    }

    stages {
        stage('Stage: Run Ansible Playbook'){
            steps { 
                script {
                    echo "Stage: Initial and Clean..."
                    echo "Input Parameters: ${params}"
                    withCredentials([usernamePassword(credentialsId: dockerCred, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                     sh """
                        echo "build and push docker images"
                        docker build -f Dockerfile -t $image  .

                        docker login -u$USERNAME -p$PASSWORD
                        docker push $image
                        docker rmi $image

                        echo "clean environment"
                        kubectl delete deploy $app
                        kubectl delete svc $app

                        echo "deploy docker"
                        kubectl create deployment $app --image=$image --port=$port
                        sleep 10
                        kubectl expose deployment $app --target-port=$port --type=NodePort
                        sleep 5
                        kubectl port-forward svc/nginx  $port:$port &
                        sleep 5

                        echo "verify application"
                        if curl localhost:$port | grep 'Welcome HONGQI' ; then
                            echo "verify successfully"
                        else
                            echo "ERROR: verify failure"
                            exit 1;
                        fi

                        echo "clean env"
                        kill -9 `ps -ax|grep port-forward | awk 'NR==1{print \$1}'`
                        
                           
                        """
                           }
						}
					}
				}

	}
}
